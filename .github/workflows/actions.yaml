name: 'control-endpoint-vms-test'

on:
  push:
    branches:
    - main
    - hotfix-*
  pull_request:
    branches: [ main ]

jobs:
  docker-build:
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
    - name: Build and push vpn-test to local registry
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: true
        tags: localhost:5000/vpn-test:latest
        cache-from: type=registry,ref=localhost:5000/vpn-test:latest
        cache-to: type=inline
    - name: Build and push runner-img to local registry
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/runner-img/Dockerfile
        push: true
        tags: localhost:5000/runner-img:latest
        cache-from: type=registry,ref=localhost:5000/runner-img:latest
        cache-to: type=inline

  terraform-build:
    runs-on: self-hosted
    environment: test
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{ secrets.TEST_PAT }}
    - name: set variables
      run: |
        echo '["WAN_195.133.0.104_29", "195.133.0.107", 29, "195.133.0.105"],' > ips.txt
        echo '["WAN_195.133.0.104_29", "195.133.0.108", 29, "195.133.0.105"]' >> ips.txt
        sed \
          -e 's/<ORG>/${{ vars.TEST_ORG }}/' \
          -e 's/<VDC>/${{ vars.TEST_VDC }}/' \
          -e 's/<USER>/${{ vars.TEST_USER }}/' \
          -e 's/<PASSWORD>/${{ secrets.TEST_PASSWORD }}/' \
          -e 's/<OS_TEMPLATE_NAME>/${{ vars.TEST_OS_TEMPLATE_NAME }}/' \
          -e 's/<OS_TEMPLATES_CATALOG>/${{ vars.TEST_OS_TEMPLATES_CATALOG }}/' \
          -e 's\<SSH_KEY_FILE>\${{ vars.TEST_SSH_KEY_FILE }}\' \
          -e 's/<LAN_NAME>/${{ vars.TEST_LAN_NAME }}/' \
          -e 's/<LAN_MANAGEMENT_IP>/${{ vars.TEST_LAN_MANAGEMENT_IP }}/' \
          -e 's/<LAN_LOWEST_IP_ADDRESS>/${{ vars.TEST_LAN_LOWEST_IP_ADDRESS }}/' \
          -e 's/<PREFIX>/${{ vars.TEST_PREFIX }}/' \
          -e 's\<URL>\${{ vars.TEST_URL }}\' \
          -e 's/<ZABBIX_SERVER_IP>/${{ vars.TEST_ZABBIX_SERVER_IP }}/' \
          -e 's/<ENDPOINT_LAN_INTERFACES>/${{ vars.TEST_ENDPOINT_LAN_INTERFACES }}/' \
          -e 's/<WAN_NAME_IP_NET_GW>/cat ips.txt/e' terraform.tfvars.default > /opt/runner-custom/terraform/terraform.tfvars.default
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
    - name: terraform init
      run: terraform init -var-file="/opt/runner-custom/terraform/terraform.tfvars.default"
    - name: terraform plan
      run: |
        terraform plan \
          -input=false \
          -var-file="/opt/runner-custom/terraform/terraform.tfvars.default" \
          -state="/opt/runner-custom/terraform/terraform.tfstate"
    - name: terraform apply
      run: |
        terraform apply \
          -auto-approve \
          -input=false \
          -var-file="/opt/runner-custom/terraform/terraform.tfvars.default" \
          -state="/opt/runner-custom/terraform/terraform.tfstate"
    - name: update known_hosts
      run: |
        ssh-keygen -f "/root/.ssh/known_hosts" -R "10.255.0.5" && \
        ssh-keygen -f "/root/.ssh/known_hosts" -R "10.255.0.4"
    - name: Output calc networks
      id: calc-networks
      run: |
        terraform output \
          -state="/opt/runner-custom/terraform/terraform.tfstate" \
          -json calc-networks >> $GITHUB_OUTPUT
    - name: Output endpoint networks
      id: ep-networks
      run: |
        terraform output \
          -state="/opt/runner-custom/terraform/terraform.tfstate" \
          -json ep-networks >> $GITHUB_OUTPUT
    - name: Output control networks
      id: ct-networks
      run: |
        terraform output \
          -state="/opt/runner-custom/terraform/terraform.tfstate" \
          -json ct-networks >> $GITHUB_OUTPUT
    - run: echo $GITHUB_OUTPUT

  tests:
    runs-on: self-hosted
    container:
      image: 127.0.0.1:5000/runner-img:latest
      volumes:
      - /lib/modules:/lib/modules
      - /root/.ssh/:/root/.ssh
      options: --privileged
    environment: test
    needs:
    - terraform-build
    - docker-build
    env:
      TEST_SSH_KEY_FILE: ${{ vars.TEST_SSH_KEY_FILE }}
      CALC_NETWORKS: ${{ needs.terraform-build.outputs.calc-networks }}
      EP_NETWORKS: ${{ needs.terraform-build.outputs.ep-networks }}
      CT_NETWORKS: ${{ needs.terraform-build.outputs.ct-networks }}
    steps:
    - uses: actions/checkout@v3
    - run: poetry install
    - run: modprobe wireguard
    - run: sysctl net.ipv6.conf.all.disable_ipv6=0
    - run: sysctl net.ipv6.conf.default.disable_ipv6=0
    - run: sysctl net.ipv6.conf.lo.disable_ipv6=0
    - run: poetry run pytest tests/test_deploy.py
    - run: poetry run pytest tests/test_brigade.py
    - run: poetry run pytest tests/test_keydesk_api.py
#    - run: poetry run pytest tests/test_connection.py

  vpn-tests:
    runs-on: self-hosted
    container:
      image: localhost:5000/vpn-test:latest
      volumes:
      - /lib/modules:/lib/modules
      - /root/.ssh/:/root/.ssh
      options: --privileged
    environment: test
    needs:
    - terraform-build
    - docker-build
    - tests
    env:
      TEST_SSH_KEY_FILE: ${{ vars.TEST_SSH_KEY_FILE }}
      CALC_NETWORKS: ${{ needs.terraform-build.outputs.calc-networks }}
      EP_NETWORKS: ${{ needs.terraform-build.outputs.ep-networks }}
      CT_NETWORKS: ${{ needs.terraform-build.outputs.ct-networks }}
    steps:
    - name: Test get VPN config
      run: poetry run pytest --tb=short tests/test_config.py
      working-directory: /home/app
    - name: Test WireGuard connection
      run: poetry run pytest --tb=short tests/test_wg.py
      working-directory: /home/app
    - name: Test Outline connection
      run: poetry run pytest --tb=short tests/test_outline.py
      working-directory: /home/app
    - name: Test OpenVPN over Cloak connection
      run: poetry run pytest --tb=short tests/test_cloak_openvpn.py
      working-directory: /home/app

  terraform-destroy:
    if: always()
    needs:
    - terraform-build
    - tests
    - vpn-tests
    runs-on: self-hosted
    steps:
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
    - uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{ secrets.TEST_PAT }}
    - name: workaround empty scripts
      run: mkdir .script-files && touch .script-files/script-ep.sh.0 && touch .script-files/script-ct.sh.0
    - name: Terraform Init
      id: init
      run: terraform init
    - name: Terraform destroy
      id: destroy
      run: |
        terraform destroy \
          -var-file=/opt/runner-custom/terraform/terraform.tfvars.default \
          -state=/opt/runner-custom/terraform/terraform.tfstate \
          -input=false \
          -auto-approve